from torch.utils.data import Dataset

class AtomDataset(Dataset):
    def __init__(self, atom_indices, atom_dds, bPlusB, atoms_id_filtered, voxel_offsets_flat,
                 upsampled_shape, upsampled_pixel_size, lead_term, scattering_params_a):
        self.atom_indices = atom_indices
        self.atom_dds = atom_dds
        self.bPlusB = bPlusB
        self.atoms_id_filtered = atoms_id_filtered
        self.voxel_offsets_flat = voxel_offsets_flat
        self.upsampled_shape = upsampled_shape
        self.upsampled_pixel_size = upsampled_pixel_size
        self.lead_term = lead_term
        self.scattering_params_a = scattering_params_a

    def __len__(self):
        return len(self.atom_indices)

    def __getitem__(self, idx):
        return (self.atom_indices[idx], self.atom_dds[idx], self.bPlusB[idx], self.atoms_id_filtered[idx],
                self.voxel_offsets_flat, self.upsampled_shape, self.upsampled_pixel_size, self.lead_term,
                self.scattering_params_a)


def process_atom_batch(batch_args):
    try:
        (atom_indices_batch, atom_dds_batch, bPlusB_batch, atoms_id_filtered_batch,
         voxel_offsets_flat, upsampled_shape, upsampled_pixel_size, lead_term,
         scattering_params_a) = batch_args

        # Move tensors to the device (GPU or CPU)
        device = atom_indices_batch.device
        local_volume = torch.zeros(upsampled_shape, device=device)

        voxel_positions = (atom_indices_batch.unsqueeze(1) + voxel_offsets_flat)  # (batch_size, n^3, 3)
        valid_mask = (voxel_positions >= 0) & (voxel_positions < torch.tensor(upsampled_shape, device=device))

        # Apply valid_mask for each dimension and calculate potentials
        valid_positions = voxel_positions[valid_mask]
        relative_coords = ((valid_positions - atom_indices_batch.unsqueeze(1) - atom_dds_batch.unsqueeze(1)
                            - PIXEL_OFFSET) * upsampled_pixel_size)

        coords1 = relative_coords
        coords2 = relative_coords + upsampled_pixel_size

        potentials = get_scattering_potential_of_voxel(
            zyx_coords1=coords1,
            zyx_coords2=coords2,
            bPlusB=bPlusB_batch,
            atom_id=atoms_id_filtered_batch,
            lead_term=lead_term,
            scattering_params_a=scattering_params_a
        )

        local_volume[valid_positions[:, 0], valid_positions[:, 1], valid_positions[:, 2]] += potentials
    except Exception as e:
        print(f"Error in process_atom_batch: {str(e)}")
        raise e

    return local_volume


from torch.utils.data import DataLoader

def process_atoms_dataloader(atom_indices, atom_dds, bPlusB, atoms_id_filtered, voxel_offsets_flat,
                             upsampled_shape, upsampled_pixel_size, lead_term, scattering_params_a,
                             batch_size, device):
    dataset = AtomDataset(atom_indices, atom_dds, bPlusB, atoms_id_filtered,
                          voxel_offsets_flat, upsampled_shape, upsampled_pixel_size, lead_term, scattering_params_a)

    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=False, num_workers=4, pin_memory=True)

    final_volume = torch.zeros(upsampled_shape, device=device)

    for batch in dataloader:
        # Move batch data to the GPU
        batch = [item.to(device) if isinstance(item, torch.Tensor) else item for item in batch]
        local_volume = process_atom_batch(batch)
        final_volume += local_volume

    return final_volume


def simulate3d(...):
    # Existing setup code here...

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")

    # Move atom data to the selected device
    atom_indices = atom_indices.to(device)
    atom_dds = atom_dds.to(device)
    bPlusB = total_b_param.to(device)

    # Process with DataLoader
    batch_size = 256  # Adjust based on GPU memory
    final_volume = process_atoms_dataloader(
        atom_indices, atom_dds, bPlusB, atoms_id_filtered, voxel_offsets_flat,
        upsampled_shape, upsampled_pixel_size, lead_term, scattering_params_a,
        batch_size, device
    )

    # Post-processing...
